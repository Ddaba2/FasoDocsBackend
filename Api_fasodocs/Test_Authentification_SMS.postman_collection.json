{
	"info": {
		"_postman_id": "test-sms-auth-2025",
		"name": "Test Authentification SMS - FasoDocs",
		"description": "Collection pour tester le flux complet d'authentification par SMS avec Twilio",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1Ô∏è‚É£ Inscription",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    pm.test('‚úÖ Inscription r√©ussie', function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    const responseJson = pm.response.json();",
							"    pm.test('‚úÖ Message de succ√®s pr√©sent', function () {",
							"        pm.expect(responseJson.success).to.be.true;",
							"        pm.expect(responseJson.message).to.include('Inscription r√©ussie');",
							"    });",
							"    ",
							"    console.log('‚úÖ Utilisateur inscrit avec succ√®s');",
							"    console.log('üì± T√©l√©phone : +22370000001');",
							"    console.log('üìß Email : test@fasodocs.ml');",
							"} else {",
							"    pm.test('‚ö†Ô∏è Inscription √©chou√©e (peut-√™tre d√©j√† inscrit)', function () {",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
							"    });",
							"    console.log('‚ö†Ô∏è ' + pm.response.json().message);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"telephone\": \"+22370000001\",\n    \"email\": \"test@fasodocs.ml\",\n    \"motDePasse\": \"Test123!\",\n    \"confirmerMotDePasse\": \"Test123!\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/inscription",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"inscription"
					]
				},
				"description": "Inscription d'un nouveau citoyen avec t√©l√©phone et email"
			},
			"response": []
		},
		{
			"name": "2Ô∏è‚É£ Connexion par T√©l√©phone (Envoie SMS)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Requ√™te r√©ussie', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test('‚úÖ Code SMS envoy√©', function () {",
							"    pm.expect(responseJson.success).to.be.true;",
							"    pm.expect(responseJson.message).to.include('code de v√©rification');",
							"});",
							"",
							"console.log('');",
							"console.log('üì± ====================================');",
							"console.log('üì± CODE SMS ENVOY√â !');",
							"console.log('üì± ====================================');",
							"console.log('');",
							"console.log('üîç V√©rifiez :');",
							"console.log('  1. Votre t√©l√©phone pour le SMS');",
							"console.log('  2. OU les logs de l\\'application si SMS d√©sactiv√©');",
							"console.log('');",
							"console.log('üìù Si SMS d√©sactiv√©, cherchez dans les logs :');",
							"console.log('   \"SMS d√©sactiv√©. Code g√©n√©r√©: XXXXXX\"');",
							"console.log('');",
							"console.log('‚è∞ Le code expire dans 5 minutes !');",
							"console.log('');",
							"console.log('‚û°Ô∏è  Copiez le code et passez √† l\\'√©tape 3');",
							"console.log('');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"telephone\": \"+22370000001\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/connexion-telephone",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"connexion-telephone"
					]
				},
				"description": "Envoie un code SMS au t√©l√©phone de l'utilisateur"
			},
			"response": []
		},
		{
			"name": "3Ô∏è‚É£ V√©rification Code SMS (Obtenir JWT)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ V√©rification r√©ussie', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test('‚úÖ Token JWT re√ßu', function () {",
							"    pm.expect(responseJson.token).to.exist;",
							"    pm.expect(responseJson.token).to.be.a('string');",
							"    pm.expect(responseJson.token.length).to.be.above(20);",
							"});",
							"",
							"pm.test('‚úÖ Informations utilisateur pr√©sentes', function () {",
							"    pm.expect(responseJson.id).to.exist;",
							"    pm.expect(responseJson.telephone).to.equal('+22370000001');",
							"    pm.expect(responseJson.email).to.equal('test@fasodocs.ml');",
							"});",
							"",
							"// Sauvegarder le token pour les prochaines requ√™tes",
							"pm.environment.set('jwt_token', responseJson.token);",
							"pm.environment.set('user_id', responseJson.id);",
							"",
							"console.log('');",
							"console.log('üéâ ====================================');",
							"console.log('üéâ AUTHENTIFICATION R√âUSSIE !');",
							"console.log('üéâ ====================================');",
							"console.log('');",
							"console.log('‚úÖ Token JWT : ' + responseJson.token.substring(0, 30) + '...');",
							"console.log('‚úÖ User ID : ' + responseJson.id);",
							"console.log('‚úÖ T√©l√©phone : ' + responseJson.telephone);",
							"console.log('‚úÖ Email : ' + responseJson.email);",
							"console.log('');",
							"console.log('üìå Le token a √©t√© sauvegard√© dans l\\'environnement');",
							"console.log('üìå Variable : jwt_token');",
							"console.log('');",
							"console.log('‚û°Ô∏è  Vous pouvez maintenant tester les endpoints prot√©g√©s');",
							"console.log('');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"telephone\": \"+22370000001\",\n    \"code\": \"123456\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/verifier-sms",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"verifier-sms"
					]
				},
				"description": "V√©rifie le code SMS et retourne un token JWT. ‚ö†Ô∏è REMPLACEZ '123456' par le vrai code re√ßu par SMS !"
			},
			"response": []
		},
		{
			"name": "4Ô∏è‚É£ Obtenir Profil (avec JWT)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Profil r√©cup√©r√©', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test('‚úÖ Donn√©es profil pr√©sentes', function () {",
							"    pm.expect(responseJson.id).to.exist;",
							"    pm.expect(responseJson.telephone).to.exist;",
							"    pm.expect(responseJson.email).to.exist;",
							"});",
							"",
							"console.log('');",
							"console.log('üë§ Profil utilisateur :');",
							"console.log('   ID : ' + responseJson.id);",
							"console.log('   T√©l√©phone : ' + responseJson.telephone);",
							"console.log('   Email : ' + responseJson.email);",
							"console.log('   T√©l√©phone v√©rifi√© : ' + responseJson.telephoneVerifie);",
							"console.log('');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/auth/profil",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"profil"
					]
				},
				"description": "R√©cup√®re le profil de l'utilisateur connect√© (n√©cessite un token JWT)"
			},
			"response": []
		},
		{
			"name": "5Ô∏è‚É£ Obtenir Toutes les Proc√©dures (Public)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Proc√©dures r√©cup√©r√©es', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test('‚úÖ Liste de proc√©dures re√ßue', function () {",
							"    pm.expect(responseJson).to.be.an('array');",
							"});",
							"",
							"if (responseJson.length > 0) {",
							"    pm.environment.set('procedure_id', responseJson[0].id);",
							"    console.log('');",
							"    console.log('üìã Nombre de proc√©dures : ' + responseJson.length);",
							"    console.log('üìå Premi√®re proc√©dure : ' + responseJson[0].titre);",
							"    console.log('');",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/procedures",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"procedures"
					]
				},
				"description": "Endpoint public - pas besoin de token JWT"
			},
			"response": []
		},
		{
			"name": "6Ô∏è‚É£ Obtenir Notifications (avec JWT)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Notifications r√©cup√©r√©es', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"",
							"pm.test('‚úÖ Liste de notifications re√ßue', function () {",
							"    pm.expect(responseJson).to.be.an('array');",
							"});",
							"",
							"console.log('');",
							"console.log('üîî Nombre de notifications : ' + responseJson.length);",
							"console.log('');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/notifications",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"notifications"
					]
				},
				"description": "Endpoint prot√©g√© - n√©cessite un token JWT"
			},
			"response": []
		},
		{
			"name": "‚ùå Test Sans Token (doit √©chouer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Acc√®s refus√© sans token (attendu)', function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"console.log('');",
							"console.log('‚úÖ S√©curit√© OK : Acc√®s refus√© sans token JWT');",
							"console.log('');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/notifications",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"notifications"
					]
				},
				"description": "Test de s√©curit√© : doit retourner 401 sans token"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}

