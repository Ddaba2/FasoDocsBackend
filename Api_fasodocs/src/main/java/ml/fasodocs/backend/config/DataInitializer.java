package ml.fasodocs.backend.config;

import ml.fasodocs.backend.entity.*;
import ml.fasodocs.backend.repository.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.Set;

/**
 * Initialise les donn√©es de base de l'application
 */
@Component
public class DataInitializer implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private CitoyenRepository citoyenRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;
    
    @Autowired
    private CategorieRepository categorieRepository;
    
    @Autowired
    private SousCategorieRepository sousCategorieRepository;
    
    @Value("${app.init.chatbot-data:true}")
    private boolean initChatbotData;

    @Override
    public void run(String... args) throws Exception {
        initializeRoles();
        initializeAdminAccount();
        
        // Initialiser les donn√©es du chatbot si activ√©
        if (initChatbotData) {
            initializeChatbotData();
        }
    }

    /**
     * Initialise les r√¥les par d√©faut
     */
    private void initializeRoles() {
        if (roleRepository.count() == 0) {
            Role roleCitoyen = new Role();
            roleCitoyen.setNom(Role.NomRole.ROLE_CITOYEN);
            roleRepository.save(roleCitoyen);

            Role roleAdmin = new Role();
            roleAdmin.setNom(Role.NomRole.ROLE_ADMIN);
            roleRepository.save(roleAdmin);

            logger.info("R√¥les initialis√©s: ROLE_CITOYEN, ROLE_ADMIN");
        }
    }

    /**
     * Initialise un compte administrateur par d√©faut
     */
    private void initializeAdminAccount() {
        // V√©rifier si un admin existe d√©j√†
        Role roleAdmin = roleRepository.findByNom(Role.NomRole.ROLE_ADMIN)
                .orElseThrow(() -> new RuntimeException("Role ADMIN non trouv√©"));

        boolean adminExists = citoyenRepository.findAll().stream()
                .anyMatch(c -> c.getRoles().contains(roleAdmin));

        if (!adminExists) {
            Citoyen admin = new Citoyen();
            admin.setNom("Admin");
            admin.setPrenom("FasoDocs");
            admin.setEmail("admin@fasodocs.ml");
            admin.setTelephone("+22370000000");
            admin.setMotDePasse(passwordEncoder.encode("Admin@2025"));
            admin.setEstActif(true);
            admin.setEmailVerifie(true);
            admin.setLanguePreferee("fr");

            Set<Role> roles = new HashSet<>();
            roles.add(roleAdmin);
            admin.setRoles(roles);

            citoyenRepository.save(admin);

            logger.info("================================================");
            logger.info("Compte administrateur cr√©√© avec succ√®s !");
            logger.info("Email: admin@fasodocs.ml");
            logger.info("Mot de passe: Admin@2025");
            logger.info("‚ö†Ô∏è  CHANGEZ CE MOT DE PASSE EN PRODUCTION !");
            logger.info("================================================");
        }
    }
    
    /**
     * Initialise les donn√©es du chatbot (cat√©gories, proc√©dures, lieux)
     */
    private void initializeChatbotData() {
        logger.info("üìä Initialisation des donn√©es du chatbot...");
        
        // V√©rifier si des donn√©es existent d√©j√†
        if (categorieRepository.count() > 0) {
            logger.info("‚úÖ Donn√©es du chatbot d√©j√† pr√©sentes. Initialisation ignor√©e.");
            return;
        }
        
        try {
            // 1. Cr√©er les cat√©gories et sous-cat√©gories
            
            // Identit√© et citoyennet√©
            Categorie catIdentite = creerCategorie("Identit√© et citoyennet√©", 
                "Documents d'identit√©, √©tat civil et citoyennet√©", "ü™™");
            creerSousCategorie("Extrait d'acte de naissance", catIdentite);
            creerSousCategorie("Extrait d'acte de mariage", catIdentite);
            creerSousCategorie("Demande de divorce", catIdentite);
            creerSousCategorie("Acte de d√©c√®s", catIdentite);
            creerSousCategorie("Certificat de nationalit√©", catIdentite);
            creerSousCategorie("Certificat de casier judiciaire", catIdentite);
            creerSousCategorie("Carte d'identit√© nationale", catIdentite);
            creerSousCategorie("Passeport malien", catIdentite);
            creerSousCategorie("Nationalit√©(par voie de naturalisation, par mariage)", catIdentite);
            creerSousCategorie("Carte d'√©lecteur", catIdentite);
            creerSousCategorie("Fiche de r√©sidence", catIdentite);
            creerSousCategorie("Inscription liste √©lectorale", catIdentite);
            
            // Cr√©ation d'entreprise
            Categorie catEntreprise = creerCategorie("Cr√©ation d'entreprise", 
                "Cr√©ation et gestion d'entreprises", "üè¢");
            creerSousCategorie("Entreprise individuel", catEntreprise);
            creerSousCategorie("Entreprise SARL", catEntreprise);
            creerSousCategorie("Entreprise unipersonnelle √† responsabilit√© limit√©e (EURL, SARL unipersonnelle)", catEntreprise);
            creerSousCategorie("Soci√©t√©s Anonymes (SA)", catEntreprise);
            creerSousCategorie("Soci√©t√©s en Nom Collectif (SNC)", catEntreprise);
            creerSousCategorie("Soci√©t√©s en Commandite Simple (SCS)", catEntreprise);
            creerSousCategorie("Soci√©t√©s par Actions Simplifi√©es (SAS)", catEntreprise);
            creerSousCategorie("Soci√©t√©s par Actions Simplifi√©es Unipersonnelle (SASU)", catEntreprise);
            
            // Documents auto
            Categorie catAuto = creerCategorie("Documents auto", 
                "Permis, carte grise et documents automobiles", "üöó");
            creerSousCategorie("Permis de conduire(renouvellement)", catAuto);
            creerSousCategorie("Carte grise(obtention, mutation et renouvellement)", catAuto);
            creerSousCategorie("Visite technique", catAuto);
            creerSousCategorie("Vignette", catAuto);
            creerSousCategorie("Changement de couleur de plaque", catAuto);
            
            // Service fonciers
            Categorie catFoncier = creerCategorie("Service fonciers", 
                "Titres fonciers, permis de construire et gestion immobili√®re", "üèòÔ∏è");
            creerSousCategorie("Permis de construire(√† usage industriel, √† usage personnelle)", catFoncier);
            creerSousCategorie("Demande de bail", catFoncier);
            creerSousCategorie("Titre foncier", catFoncier);
            creerSousCategorie("V√©rification des titres de propri√©t√©s", catFoncier);
            creerSousCategorie("Lettre d'attribution du titre provisoire de concession rurale", catFoncier);
            creerSousCategorie("permis d'occupation", catFoncier);
            creerSousCategorie("Lettre de transfert de parcelle √† usage d'habitation", catFoncier);
            creerSousCategorie("Titre provisoire en titre foncier(CUH, CRH et contrat de bail avec promesse de vente)", catFoncier);
            creerSousCategorie("Concession urbaine √† usage d'habitation(CUH)", catFoncier);
            
            // Eau et √©lectricit√©
            Categorie catEauElec = creerCategorie("Eau et √©lectricit√©", 
                "Services d'eau et d'√©lectricit√©", "üí°");
            creerSousCategorie("Demande d'un compteur d'eau", catEauElec);
            creerSousCategorie("Demande d'un compteur d'√©lectricit√©", catEauElec);
            creerSousCategorie("R√©cup√©rer un compteur d'eau suspendue", catEauElec);
            creerSousCategorie("R√©cup√©rer un compteur d'√©lectricit√© suspendue", catEauElec);
            creerSousCategorie("Demande de transf√©rer d'un compteur d'eau", catEauElec);
            creerSousCategorie("Demande de transf√©rer d'un compteur d'√©lectricit√©", catEauElec);
            
            // Justice
            Categorie catJustice = creerCategorie("Justice", 
                "Services judiciaires et proc√©dures juridiques", "‚öñÔ∏è");
            creerSousCategorie("D√©claration de vol", catJustice);
            creerSousCategorie("D√©claration de perte", catJustice);
            creerSousCategorie("R√®glement d'un litige", catJustice);
            creerSousCategorie("Demande de visite d'un prisonnier", catJustice);
            creerSousCategorie("Demande d'appel d'une d√©cision de jugement", catJustice);
            creerSousCategorie("Demande de lib√©ration conditionnelle", catJustice);
            creerSousCategorie("Demande de lib√©ration provisoire", catJustice);
            creerSousCategorie("Autorisation d'achat d'armes et munitions", catJustice);
            creerSousCategorie("Autorisation de vente des biens d'un mineur", catJustice);
            
            // Imp√¥t et Douane
            Categorie catImpot = creerCategorie("Imp√¥t et Douane", 
                "D√©clarations fiscales et douani√®res", "üí∞");
            creerSousCategorie("D√©claration de revenu foncier", catImpot);
            creerSousCategorie("D√©claration de TVA(Taxe sur la Valeur Ajout√©e)", catImpot);
            creerSousCategorie("Enregistrement d'un contrat", catImpot);
            creerSousCategorie("L'Imp√¥t sur les traitements et salaires (I.T.S)", catImpot);
            creerSousCategorie("La Contribution forfaitaire √† la charge des employeurs (CFE)", catImpot);
            creerSousCategorie("La Taxe logement (TL)", catImpot);
            creerSousCategorie("La Contribution G√©n√©rale de solidarit√© (CGS) (Loi 2018-010 du 12 F√©vrier 2018)", catImpot);
            creerSousCategorie("La Taxe de Solidarit√© et de Lutte contre le Tabagisme (TSLT) (Loi 2018-010 du 12 F√©vrier 2018)", catImpot);
            creerSousCategorie("L'Imp√¥t sur les b√©n√©fices industriels et commerciaux (IBIC /IS)", catImpot);
            creerSousCategorie("L'Imp√¥t synth√©tique", catImpot);
            creerSousCategorie("L'Imp√¥t sur les b√©n√©fices agricoles (IBA)", catImpot);
            creerSousCategorie("L'Imp√¥t sur les revenus de valeurs Mobili√®res (IRVM)", catImpot);
            creerSousCategorie("L'Imp√¥t sur les revenus fonciers (IRF)", catImpot);
            creerSousCategorie("La Taxe fonci√®re (T.F)", catImpot);
            creerSousCategorie("La Patente professionnelle et licence", catImpot);
            creerSousCategorie("La Patente sur march√©s", catImpot);
            creerSousCategorie("La Taxe touristique (T.T)", catImpot);
            creerSousCategorie("La taxe sur les v√©hicules automobiles (Vignettes ordinaires)", catImpot);
            creerSousCategorie("La Taxe sur les transports routiers (TTR)", catImpot);
            creerSousCategorie("Les pr√©l√®vements", catImpot);
            creerSousCategorie("La redevance et le recouvrement de r√©gulation sur les march√©s publics", catImpot);
            creerSousCategorie("Imp√¥t sp√©cial sur certains produits (ISCP)", catImpot);
            creerSousCategorie("Taxe sur les activit√©s financi√®res(TAF)", catImpot);
            creerSousCategorie("Taxe int√©rieure sur les produits p√©troliers (TIPP)", catImpot);
            creerSousCategorie("Contribution de solidarit√© sur les billets d'avion (CSB)", catImpot);
            creerSousCategorie("Taxe sur l'acc√®s au r√©seau des t√©l√©communications ouvert au public (TARTOP)", catImpot);
            creerSousCategorie("Taxe sur les contrats d'assurance (TCA)", catImpot);
            creerSousCategorie("Taxe sur les exportateurs d'or non r√©gis par le code minier", catImpot);
            creerSousCategorie("Taxe sur les armes √† feu", catImpot);
            
            logger.info("================================================");
            logger.info("üéâ Donn√©es du chatbot initialis√©es avec succ√®s !");
            logger.info("üìä Statistiques:");
            logger.info("   - Cat√©gories: {}", categorieRepository.count());
            logger.info("   - Sous-cat√©gories: {}", sousCategorieRepository.count());
            logger.info("================================================");
            
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de l'initialisation des donn√©es du chatbot", e);
        }
    }
    
    private Categorie creerCategorie(String titre, String description, String icone) {
        Categorie categorie = new Categorie();
        categorie.setTitre(titre);
        categorie.setDescription(description);
        categorie.setIconeUrl(icone);
        // D√©finir le nom de cat√©gorie bas√© sur le titre
        categorie.setNomCategorie(CategorieEnum.AUTRES_DOMAINES); // Valeur par d√©faut
        return categorieRepository.save(categorie);
    }
    
    private SousCategorie creerSousCategorie(String titre, Categorie categorie) {
        SousCategorie sousCategorie = new SousCategorie();
        sousCategorie.setTitre(titre);
        sousCategorie.setCategorie(categorie);
        return sousCategorieRepository.save(sousCategorie);
    }
}
