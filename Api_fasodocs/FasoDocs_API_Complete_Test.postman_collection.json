{
	"info": {
		"_postman_id": "fasodocs-complete-test-2025",
		"name": "FasoDocs API - Tests Complets",
		"description": "Collection compl√®te pour tester toutes les fonctionnalit√©s du backend FasoDocs - Mali",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "fasodocs-backend"
	},
	"item": [
		{
			"name": "üîê Authentification",
			"item": [
				{
					"name": "1. Inscription d'un nouveau citoyen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Inscription r√©ussie', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Message de succ√®s', function () {",
									"        pm.expect(responseJson.success).to.be.true;",
									"    });",
									"} else {",
									"    pm.test('Inscription √©chou√©e', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"telephone\": \"+22370000001\",\n    \"email\": \"test@fasodocs.ml\",\n    \"motDePasse\": \"Test123!\",\n    \"confirmerMotDePasse\": \"Test123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/inscription",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"inscription"
							]
						},
						"description": "Inscription d'un nouveau citoyen avec email et t√©l√©phone"
					},
					"response": []
				},
				{
					"name": "2. Connexion par t√©l√©phone (envoie code SMS)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Connexion initi√©e', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Code SMS envoy√©', function () {",
									"        pm.expect(responseJson.success).to.be.true;",
									"    });",
									"} else {",
									"    pm.test('Connexion √©chou√©e', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"telephone\": \"+22370000001\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/connexion-telephone",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"connexion-telephone"
							]
						},
						"description": "Connexion par t√©l√©phone uniquement - envoie un code SMS de v√©rification"
					},
					"response": []
				},
				{
					"name": "3. V√©rification code SMS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('V√©rification SMS r√©ussie', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Token JWT re√ßu', function () {",
									"        pm.expect(responseJson.accessToken).to.exist;",
									"    });",
									"    ",
									"    // Sauvegarder le token pour les autres requ√™tes",
									"    pm.environment.set('jwt_token', responseJson.accessToken);",
									"    pm.environment.set('user_id', responseJson.id);",
									"} else {",
									"    pm.test('V√©rification SMS √©chou√©e', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"telephone\": \"+22370000001\",\n    \"codeSms\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/verifier-sms",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"verifier-sms"
							]
						},
						"description": "V√©rification du code SMS et obtention du token JWT"
					},
					"response": []
				},
				{
					"name": "4. Connexion par t√©l√©phone - Test avec num√©ro existant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Connexion par t√©l√©phone r√©ussie', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Code SMS envoy√©', function () {",
									"        pm.expect(responseJson.success).to.be.true;",
									"    });",
									"} else {",
									"    pm.test('Connexion par t√©l√©phone √©chou√©e', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"telephone\": \"+22370000001\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/connexion-telephone",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"connexion-telephone"
							]
						},
						"description": "Test de connexion par t√©l√©phone avec un num√©ro existant"
					},
					"response": []
				},
				{
					"name": "5. Connexion Admin (pour tests)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Connexion Admin r√©ussie', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Token JWT Admin re√ßu', function () {",
									"        pm.expect(responseJson.accessToken).to.exist;",
									"    });",
									"    ",
									"    // Sauvegarder le token admin",
									"    pm.environment.set('admin_jwt_token', responseJson.accessToken);",
									"    pm.environment.set('admin_user_id', responseJson.id);",
									"} else {",
									"    pm.test('Connexion Admin √©chou√©e', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identifiant\": \"admin@fasodocs.ml\",\n    \"motDePasse\": \"Admin@2025\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/connexion",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"connexion"
							]
						},
						"description": "Connexion avec le compte administrateur par d√©faut"
					},
					"response": []
				},
				{
					"name": "5. Obtenir profil utilisateur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Profil r√©cup√©r√©', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Donn√©es utilisateur pr√©sentes', function () {",
									"        pm.expect(responseJson.email).to.exist;",
									"        pm.expect(responseJson.telephone).to.exist;",
									"    });",
									"} else {",
									"    pm.test('Erreur r√©cup√©ration profil', function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profil",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profil"
							]
						},
						"description": "R√©cup√©ration du profil de l'utilisateur connect√©"
					},
					"response": []
				},
				{
					"name": "6. Mise √† jour profil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Profil mis √† jour', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Message de succ√®s', function () {",
									"        pm.expect(responseJson.success).to.be.true;",
									"    });",
									"} else {",
									"    pm.test('Erreur mise √† jour profil', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Dupont\",\n    \"prenom\": \"Jean\",\n    \"languePreferee\": \"fr\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profil",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profil"
							]
						},
						"description": "Mise √† jour du profil utilisateur"
					},
					"response": []
				},
				{
					"name": "7. D√©connexion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('D√©connexion r√©ussie', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Message de succ√®s', function () {",
									"        pm.expect(responseJson.success).to.be.true;",
									"    });",
									"    ",
									"    // Nettoyer les variables d'environnement",
									"    pm.environment.unset('jwt_token');",
									"    pm.environment.unset('user_id');",
									"} else {",
									"    pm.test('Erreur d√©connexion', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/deconnexion",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"deconnexion"
							]
						},
						"description": "D√©connexion de l'utilisateur"
					},
					"response": []
				}
			],
			"description": "Tests d'authentification et de gestion du profil utilisateur"
		},
		{
			"name": "üìã Proc√©dures",
			"item": [
				{
					"name": "1. Obtenir toutes les proc√©dures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Liste des proc√©dures r√©cup√©r√©e', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test('Array de proc√©dures', function () {",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"if (responseJson.length > 0) {",
									"    pm.test('Structure de proc√©dure valide', function () {",
									"        const procedure = responseJson[0];",
									"        pm.expect(procedure.id).to.exist;",
									"        pm.expect(procedure.nom).to.exist;",
									"        pm.expect(procedure.titre).to.exist;",
									"    });",
									"    ",
									"    // Sauvegarder l'ID de la premi√®re proc√©dure pour les tests suivants",
									"    pm.environment.set('procedure_id', responseJson[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/procedures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures"
							]
						},
						"description": "R√©cup√©ration de toutes les proc√©dures disponibles"
					},
					"response": []
				},
				{
					"name": "2. Obtenir une proc√©dure par ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Proc√©dure r√©cup√©r√©e', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Donn√©es compl√®tes de proc√©dure', function () {",
									"        pm.expect(responseJson.id).to.exist;",
									"        pm.expect(responseJson.nom).to.exist;",
									"        pm.expect(responseJson.titre).to.exist;",
									"        pm.expect(responseJson.delai).to.exist;",
									"    });",
									"    ",
									"    // Sauvegarder l'ID de cat√©gorie pour les tests suivants",
									"    if (responseJson.categorie) {",
									"        pm.environment.set('categorie_id', responseJson.categorie.id);",
									"    }",
									"} else {",
									"    pm.test('Proc√©dure non trouv√©e', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/procedures/{{procedure_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures",
								"{{procedure_id}}"
							]
						},
						"description": "R√©cup√©ration d'une proc√©dure sp√©cifique par son ID"
					},
					"response": []
				},
				{
					"name": "3. Rechercher des proc√©dures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Recherche effectu√©e', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test('R√©sultats de recherche', function () {",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"pm.test('Au moins un r√©sultat trouv√©', function () {",
									"    pm.expect(responseJson.length).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/procedures/rechercher?q=naissance",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures",
								"rechercher"
							],
							"query": [
								{
									"key": "q",
									"value": "naissance"
								}
							]
						},
						"description": "Recherche de proc√©dures par mot-cl√©"
					},
					"response": []
				},
				{
					"name": "4. Obtenir proc√©dures par cat√©gorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Proc√©dures par cat√©gorie r√©cup√©r√©es', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test('Array de proc√©dures', function () {",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"if (responseJson.length > 0) {",
									"    pm.test('Toutes les proc√©dures appartiennent √† la m√™me cat√©gorie', function () {",
									"        const categorieId = pm.environment.get('categorie_id');",
									"        responseJson.forEach(procedure => {",
									"            if (procedure.categorie) {",
									"                pm.expect(procedure.categorie.id).to.eql(parseInt(categorieId));",
									"            }",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/procedures/categorie/{{categorie_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures",
								"categorie",
								"{{categorie_id}}"
							]
						},
						"description": "R√©cup√©ration des proc√©dures d'une cat√©gorie sp√©cifique"
					},
					"response": []
				},
				{
					"name": "5. Cr√©er une nouvelle proc√©dure (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Proc√©dure cr√©√©e', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Nouvelle proc√©dure avec ID', function () {",
									"        pm.expect(responseJson.id).to.exist;",
									"        pm.expect(responseJson.nom).to.eql('Test Proc√©dure');",
									"    });",
									"    ",
									"    // Sauvegarder l'ID de la nouvelle proc√©dure",
									"    pm.environment.set('new_procedure_id', responseJson.id);",
									"} else if (pm.response.code === 403) {",
									"    pm.test('Acc√®s refus√© - Admin requis', function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"} else {",
									"    pm.test('Erreur cr√©ation proc√©dure', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Test Proc√©dure\",\n    \"titre\": \"Test de cr√©ation de proc√©dure\",\n    \"description\": \"Proc√©dure cr√©√©e pour les tests\",\n    \"delai\": \"5 jours ouvr√©s\",\n    \"urlVersFormulaire\": \"https://example.com/formulaire\",\n    \"categorieId\": {{categorie_id}},\n    \"etapes\": [\n        \"√âtape 1: Rassembler les documents\",\n        \"√âtape 2: Remplir le formulaire\",\n        \"√âtape 3: Soumettre la demande\"\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/procedures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures"
							]
						},
						"description": "Cr√©ation d'une nouvelle proc√©dure (n√©cessite les droits admin)"
					},
					"response": []
				},
				{
					"name": "6. Mettre √† jour une proc√©dure (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Proc√©dure mise √† jour', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Titre modifi√©', function () {",
									"        pm.expect(responseJson.titre).to.eql('Test Proc√©dure Modifi√©e');",
									"    });",
									"} else if (pm.response.code === 403) {",
									"    pm.test('Acc√®s refus√© - Admin requis', function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"} else {",
									"    pm.test('Erreur mise √† jour proc√©dure', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Test Proc√©dure\",\n    \"titre\": \"Test Proc√©dure Modifi√©e\",\n    \"description\": \"Proc√©dure modifi√©e pour les tests\",\n    \"delai\": \"7 jours ouvr√©s\",\n    \"urlVersFormulaire\": \"https://example.com/formulaire-updated\",\n    \"categorieId\": {{categorie_id}},\n    \"etapes\": [\n        \"√âtape 1: Rassembler les documents\",\n        \"√âtape 2: Remplir le formulaire\",\n        \"√âtape 3: Soumettre la demande\",\n        \"√âtape 4: Suivi de la demande\"\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/procedures/{{new_procedure_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures",
								"{{new_procedure_id}}"
							]
						},
						"description": "Mise √† jour d'une proc√©dure existante (n√©cessite les droits admin)"
					},
					"response": []
				},
				{
					"name": "7. Supprimer une proc√©dure (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Proc√©dure supprim√©e', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Message de succ√®s', function () {",
									"        pm.expect(responseJson.success).to.be.true;",
									"    });",
									"    ",
									"    // Nettoyer la variable d'environnement",
									"    pm.environment.unset('new_procedure_id');",
									"} else if (pm.response.code === 403) {",
									"    pm.test('Acc√®s refus√© - Admin requis', function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"} else {",
									"    pm.test('Erreur suppression proc√©dure', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/procedures/{{new_procedure_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures",
								"{{new_procedure_id}}"
							]
						},
						"description": "Suppression d'une proc√©dure (n√©cessite les droits admin)"
					},
					"response": []
				}
			],
			"description": "Tests de gestion des proc√©dures administratives"
		},
		{
			"name": "üîî Notifications",
			"item": [
				{
					"name": "1. Obtenir toutes les notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notifications r√©cup√©r√©es', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test('Array de notifications', function () {",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"if (responseJson.length > 0) {",
									"    pm.test('Structure de notification valide', function () {",
									"        const notification = responseJson[0];",
									"        pm.expect(notification.id).to.exist;",
									"        pm.expect(notification.titre).to.exist;",
									"        pm.expect(notification.contenu).to.exist;",
									"    });",
									"    ",
									"    // Sauvegarder l'ID de la premi√®re notification",
									"    pm.environment.set('notification_id', responseJson[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications"
							]
						},
						"description": "R√©cup√©ration de toutes les notifications de l'utilisateur connect√©"
					},
					"response": []
				},
				{
					"name": "2. Obtenir notifications non lues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Notifications non lues r√©cup√©r√©es', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test('Array de notifications non lues', function () {",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"pm.test('Toutes les notifications sont non lues', function () {",
									"    responseJson.forEach(notification => {",
									"        pm.expect(notification.estLue).to.be.false;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/non-lues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"non-lues"
							]
						},
						"description": "R√©cup√©ration des notifications non lues"
					},
					"response": []
				},
				{
					"name": "3. Compter notifications non lues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Compteur r√©cup√©r√©', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test('Nombre entier retourn√©', function () {",
									"    pm.expect(responseJson).to.be.a('number');",
									"    pm.expect(responseJson).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/count-non-lues",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"count-non-lues"
							]
						},
						"description": "Comptage des notifications non lues"
					},
					"response": []
				},
				{
					"name": "4. Marquer notification comme lue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Notification marqu√©e comme lue', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Notification marqu√©e comme lue', function () {",
									"        pm.expect(responseJson.estLue).to.be.true;",
									"    });",
									"} else {",
									"    pm.test('Erreur marquage notification', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/{{notification_id}}/lire",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notification_id}}",
								"lire"
							]
						},
						"description": "Marquage d'une notification sp√©cifique comme lue"
					},
					"response": []
				},
				{
					"name": "5. Marquer toutes les notifications comme lues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Toutes les notifications marqu√©es comme lues', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/lire-tout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"lire-tout"
							]
						},
						"description": "Marquage de toutes les notifications comme lues"
					},
					"response": []
				}
			],
			"description": "Tests de gestion des notifications"
		},
		{
			"name": "üîç Tests de S√©curit√©",
			"item": [
				{
					"name": "1. Acc√®s sans token JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Acc√®s refus√© sans token', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/profil",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profil"
							]
						},
						"description": "Test d'acc√®s √† une route prot√©g√©e sans token JWT"
					},
					"response": []
				},
				{
					"name": "2. Acc√®s avec token invalide",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Acc√®s refus√© avec token invalide', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer token-invalide-123"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profil",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profil"
							]
						},
						"description": "Test d'acc√®s avec un token JWT invalide"
					},
					"response": []
				},
				{
					"name": "3. Acc√®s admin avec token utilisateur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Acc√®s refus√© - Admin requis', function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Test\",\n    \"titre\": \"Test\",\n    \"delai\": \"1 jour\",\n    \"categorieId\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/procedures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures"
							]
						},
						"description": "Test d'acc√®s √† une route admin avec un token utilisateur normal"
					},
					"response": []
				}
			],
			"description": "Tests de s√©curit√© et d'autorisation"
		},
		{
			"name": "üìä Tests de Performance",
			"item": [
				{
					"name": "1. Test de charge - Liste des proc√©dures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Temps de r√©ponse acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test('Status code 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test('Donn√©es retourn√©es', function () {",
									"    pm.expect(responseJson).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/procedures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures"
							]
						},
						"description": "Test de performance pour la r√©cup√©ration de toutes les proc√©dures"
					},
					"response": []
				},
				{
					"name": "2. Test de charge - Recherche",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Temps de r√©ponse acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"pm.test('Status code 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/procedures/rechercher?q=test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures",
								"rechercher"
							],
							"query": [
								{
									"key": "q",
									"value": "test"
								}
							]
						},
						"description": "Test de performance pour la recherche de proc√©dures"
					},
					"response": []
				}
			],
			"description": "Tests de performance et de charge"
		},
		{
			"name": "üåê Tests d'Int√©gration",
			"item": [
				{
					"name": "1. Flux complet d'inscription et connexion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test du flux complet d'inscription",
									"if (pm.response.code === 200) {",
									"    pm.test('Inscription r√©ussie', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.test('Message de succ√®s', function () {",
									"        pm.expect(responseJson.success).to.be.true;",
									"    });",
									"    ",
									"    // Programmer la connexion apr√®s l'inscription",
									"    setTimeout(() => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get('base_url') + '/api/auth/connexion',",
									"            method: 'POST',",
									"            header: {",
									"                'Content-Type': 'application/json'",
									"            },",
									"            body: {",
									"                mode: 'raw',",
									"                raw: JSON.stringify({",
									"                    identifiant: 'integration@fasodocs.ml',",
									"                    motDePasse: 'Integration123!'",
									"                })",
									"            }",
									"        }, function (err, response) {",
									"            if (response.code === 200) {",
									"                console.log('Connexion apr√®s inscription r√©ussie');",
									"            }",
									"        });",
									"    }, 1000);",
									"} else {",
									"    pm.test('Inscription √©chou√©e', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"telephone\": \"+22370000099\",\n    \"email\": \"integration@fasodocs.ml\",\n    \"motDePasse\": \"Integration123!\",\n    \"confirmerMotDePasse\": \"Integration123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/inscription",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"inscription"
							]
						},
						"description": "Test d'int√©gration du flux complet d'inscription et connexion"
					},
					"response": []
				},
				{
					"name": "2. Flux complet de gestion de proc√©dure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test du flux complet de gestion de proc√©dure",
									"if (pm.response.code === 200) {",
									"    pm.test('Proc√©dure cr√©√©e', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const responseJson = pm.response.json();",
									"    const procedureId = responseJson.id;",
									"    ",
									"    // Tester la r√©cup√©ration de la proc√©dure cr√©√©e",
									"    setTimeout(() => {",
									"        pm.sendRequest({",
									"            url: pm.environment.get('base_url') + '/api/procedures/' + procedureId,",
									"            method: 'GET',",
									"            header: {",
									"                'Authorization': 'Bearer ' + pm.environment.get('admin_jwt_token')",
									"            }",
									"        }, function (err, response) {",
									"            if (response.code === 200) {",
									"                console.log('R√©cup√©ration de la proc√©dure cr√©√©e r√©ussie');",
									"                ",
									"                // Tester la suppression",
									"                setTimeout(() => {",
									"                    pm.sendRequest({",
									"                        url: pm.environment.get('base_url') + '/api/procedures/' + procedureId,",
									"                        method: 'DELETE',",
									"                        header: {",
									"                            'Authorization': 'Bearer ' + pm.environment.get('admin_jwt_token')",
									"                        }",
									"                    }, function (err, response) {",
									"                        if (response.code === 200) {",
									"                            console.log('Suppression de la proc√©dure r√©ussie');",
									"                        }",
									"                    });",
									"                }, 1000);",
									"            }",
									"        });",
									"    }, 1000);",
									"} else {",
									"    pm.test('Erreur cr√©ation proc√©dure', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nom\": \"Proc√©dure Test Int√©gration\",\n    \"titre\": \"Test d'int√©gration complet\",\n    \"description\": \"Proc√©dure cr√©√©e pour tester le flux complet\",\n    \"delai\": \"3 jours ouvr√©s\",\n    \"categorieId\": {{categorie_id}},\n    \"etapes\": [\n        \"√âtape 1: Test\",\n        \"√âtape 2: Validation\",\n        \"√âtape 3: Finalisation\"\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/procedures",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"procedures"
							]
						},
						"description": "Test d'int√©gration du flux complet de gestion de proc√©dure (cr√©ation, r√©cup√©ration, suppression)"
					},
					"response": []
				}
			],
			"description": "Tests d'int√©gration et de flux complets"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global de pr√©-requ√™te",
					"console.log('Ex√©cution de la requ√™te:', pm.info.requestName);",
					"",
					"// V√©rifier que l'URL de base est d√©finie",
					"if (!pm.environment.get('base_url')) {",
					"    console.warn('Variable base_url non d√©finie. Utilisation de localhost:8080');",
					"    pm.environment.set('base_url', 'http://localhost:8080');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global de test",
					"console.log('Test de la r√©ponse pour:', pm.info.requestName);",
					"",
					"// Test g√©n√©ral de la structure de la r√©ponse",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Test de la pr√©sence d'en-t√™tes CORS",
					"pm.test('CORS headers present', function () {",
					"    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
